# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tV5j-DRcpPtoJGoMj8v2DSqR_9wyXeiE

**Task 07: Querying RDF(s)**
"""

#!ip install rdflib 
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4"

"""Leemos el fichero RDF de la forma que lo hemos venido haciendo"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/resources/example6.rdf", format="xml")

from rdflib.plugins.sparql import prepareQuery
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns = Namespace("http://somewhere#")

#**TASK 7.1: List all subclasses of "Person" with RDFLib and SPARQL**
print("---- TASK 7.1 ----")

print("Usando RDFLib:")
for subj, pred, obj in g.triples((None, RDFS.subClassOf, ns.Person)):
    print(subj, "--> es una subclase de Person")
    for subj1, pred1, obj1 in g.triples((None, RDFS.subClassOf, subj)):
        print(subj1, "--> es una subclase de", subj, "y por tanto de Person")

print("Usando SPARQL:")
query = prepareQuery( '''
        SELECT DISTINCT ?subClass ?pred ?obj
        WHERE {
            ?subClass rdfs:subClassOf* <http://somewhere#Person>.
            ?subClass ?pred ?obj filter(?pred not in (rdf:type))
        }
        ''',
        initNs = {"rdfs": RDFS, "ns": ns}
)

for res in g.query(query):
  print(res)

#**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**
print("---- TASK 7.2 ----")

print("Usando RDFLib:")
for subj, pred, obj in g.triples((None, RDFS.subClassOf, ns.Person)):
    for subj1, pred1, obj1 in g.triples((None, RDF.type, subj)):
        print(subj1)
for subj, pred, obj in g.triples((None, RDF.type, ns.Person)):
    print(subj)

print("Usando SPARQL:")
query = prepareQuery( '''
        SELECT DISTINCT ?individual
        WHERE {
            {
                ?individual rdf:type ns:Person
            } UNION { 
                ?person rdfs:subClassOf ns:Person .
                ?individual rdf:type ?person 
            }
        }
        ''',
        initNs = {"rdfs": RDFS, "rdf": RDF, "ns": ns}
)

for res in g.query(query):
  print(res)


#**TASK 7.3: List all individuals of "Person" and all their properties including their class with RDFLib and SPARQL**
print("---- TASK 7.3 ----")

print("Usando RDFLib:")
for subj,pred,obj in g.triples((None, RDFS.subClassOf, ns.Person)):
  for subj0,pred0,obj0 in g.triples((None, RDF.type, subj)):
    for subj1,pred1,obj1 in g.triples((subj0, None, None)):
      print(subj1,pred1,obj1)

for subj,pred,obj in g.triples((None, RDF.type, ns.Person)):
  for subj0,pred0,obj0 in g.triples((subj, None, None)):
     print(subj0, pred0, obj0)

print("Usando SPARQL:")
query = prepareQuery( '''
        SELECT DISTINCT ?individual ?prop ?value
        WHERE {
            {
                ?individual rdf:type ns:Person .
                ?individual ?prop ?value .
            } UNION { 
                ?person rdfs:subClassOf ns:Person .
                ?individual rdf:type ?person .
                ?individual ?prop ?value 
            }
        }
        ''',
        initNs = {"rdfs": RDFS, "rdf": RDF, "ns": ns}
)

for res in g.query(query):
  print(res)

