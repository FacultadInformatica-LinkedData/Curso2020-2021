# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18P0xTS31q1P7nR4efg0Yy3QrClOxqMAe

**Task 08: Completing missing data**
"""

github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2020-2021/master/Assignment4/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"resources/data01.rdf", format="xml")
g2.parse(github_storage+"resources/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

print("TASK 8")

from rdflib.namespace import RDF, RDFS

VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
ns = Namespace("http://data.org#")

people = []
properties = []

# Completa la persona descrita por el argumento en el grafo g1 si
# esta carece de la informacion que posee el grafo g2
def complete(person):
    for s,p1,o in g1.triples((person, None, None)):
        for p2 in properties:
            if g1.value(subject=s, predicate=p2, object=None) is None:
                g1.add((s, p2, g2.value(subject=s, predicate=p2, object=None)))

print("\nPeople in g1:")
for s,p,o in g1.triples((None, RDF.type, ns.Person)):
    people.append(s)
    print(s)

properties.append(VCARD.Family)
properties.append(VCARD.Given)
properties.append(VCARD.EMAIL)

print("\nProperties wanted to complete:")
for prop in properties:
    print(prop)

print("\nGraph 1 before:")
print(g1.serialize(format="ttl").decode("UTF-8"))

for s,p,o in g1.triples((None, RDF.type, ns.Person)):
    complete(s)

print("\nGraph 1 after:")
print(g1.serialize(format="ttl").decode("UTF-8"))
